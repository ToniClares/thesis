#%% 0. base libraries
import numpy as np
import open3d as o3d
import laspy as lp
import networkx as nx
from scipy.spatial import cKDTree
import matplotlib.pyplot as plt
from skimage import measure

#%% 1. load and data preparation

DATANAME = "v04.ply"
input_path = "../DATA/"
output_path = "../RESULTS/"

pcd = o3d.io.read_point_cloud(input_path + DATANAME)
translation = pcd.get_min_bound()
pcd.translate(-translation)

# %% 2.1 Statistical outlier filter
nn = 16
std_multiplier = 10

filtered_pcd = pcd.remove_statistical_outlier(nn , std_multiplier)

outliers = pcd.select_by_index(filtered_pcd[1], invert=True)
outliers.paint_uniform_color([1, 0, 0])
filtered_pcd = filtered_pcd[0]

o3d.visualization.draw_geometries([filtered_pcd, outliers])

# %% 2.2 Voxel downsampling
voxel_size = 0.02

pcd_downsampled = filtered_pcd.voxel_down_sample(voxel_size = voxel_size)

o3d.visualization.draw_geometries([pcd_downsampled])

# %% 3. 3D Mesh function
def point_cloud_to_mesh(pcd, voxel_size=0.02, iso_level_percentile=50):
    # Convert Open3d point cloud to numpy array
    points = np.asarray(pcd.points)

    # Compute the bounds of the point cloud
    mins = np.min(points, axis=0)
    maxs = np.max(points, axis=0)

    # Create a 3D grid
    x = np.arange(mins[0], maxs[0], voxel_size)
    y = np.arange(mins[1], maxs[1], voxel_size)
    z = np.arange(mins[2], maxs[2], voxel_size)
    x,y,z = np.meshgrid(x,y,z, indexing='ij')

    # Create a KD-tree for efficient nearest neighbor search
    tree = cKDTree(points)

    # Compute the scalar field (distance to nearest point)
    grid_points = np.vstack([x.ravel(), y.ravel(), z.ravel()]).T
    distances, _ = tree.query(grid_points)
    scalar_field = distances.reshape(x.shape)

    # Determine iso-level based on percentile of distances
    iso_level = np.percentile(distances, iso_level_percentile)

    # Apply Marching Cubes
    verts, faces, _, _ = measure.marching_cubes(scalar_field, level=iso_level)

    # Scale and translate vertices back to original coordinate system
    verts = verts*voxel_size + mins

    # Create mesh
    mesh = o3d.geometry.TriangleMesh()
    mesh.vertices = o3d.utility.Vector3dVector(verts)
    mesh.triangles = o3d.utility.Vector3iVector(faces)

    # Compute vertx normals
    mesh.compute_vertex_normals()

    return mesh

# %% 4. Point cloud to mesh

# Convert to mesh (change the iso_level_percentile to downsize the bubbleing)
mesh = point_cloud_to_mesh(pcd_downsampled, voxel_size=0.01, iso_level_percentile=0.5)

# Visualize the result
o3d.visualization.draw_geometries([mesh], mesh_show_back_face=True)

# Save the mesh
o3d.io.write_triangle_mesh(output_path+"output_mesh.ply", mesh)
